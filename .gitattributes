
#include <iostream>

using namespace std;


class node{
public:
int data;
node* prev;
node* next ;

};

class LL{
    public:

node *head;
LL(){
head=NULL;}

void insertx(){
int x;
//string lo;
//cin>>lo ;
//if(lo=="insert"){
  // cout<< "insert ";
    cin>> x;
    node *n=new node;
    n->data=x ;
    n->prev=NULL;

    n->next=head;

    if(head!=NULL){
       head->prev=n;
       }
         head=n;


}
void insertlast(){
    int value ;
    //cout<<"insert" ;
    cin>>value ;
    node *n=new node;

   node* current=head; ;
   n->data=value ;
    n->next=NULL;

    if(head==NULL){
            n->prev=NULL;
        head=n;
    return ;
        }

while(current->next!=NULL){
    current=current->next ;

}
current->next=n;
current->prev=current ;
}
void deleteFirst(){

    node *n=new node;
if(head==NULL){cout<<"empty";}
head=head->next;
head->prev=NULL;
delete n;



}
void deleteLast(){
    node *n=new node;
if(head==NULL){cout<<"empty";}
else{
    node* curr=head;
while(curr->next->next!=NULL){
    curr=curr->next ;

}
curr->prev=curr;
  curr->next=NULL;

delete n;}

}


void show(){
    node *n=new node;
node* curr=head;
cout<<curr->data;
//node p=curr->next ;
while(curr->next!=NULL){
cout<<" "<<curr->next->data;
curr=curr->next;
}



}



void deletex() {
    //string j;
    //cin>>j ;
    //if(j=="delete"){
int val;
cin>>val ;

while (head !=NULL && head->data == val) {
head = head->next;
}

node *current_node = head;
while (current_node !=NULL && current_node->next !=NULL)
if (current_node->next-> data == val) {
current_node->next =current_node->next->next;}
 else {
current_node = current_node->next;
 }
//return head;



}



};














int main()
{
    LL listi;
    int n;
    cin>> n;
    if(n<=2000000){
    string m;

   for(int i=0;i<n;i++){
            cin>> m;
        if(m=="insert"){
            listi.insertx();
        }
        if(m=="delete"){
            listi.deletex();
        }
        if(m=="deleteLast"){
            listi.deleteLast();
        }
        if(m=="deleteFirst"){
            listi.deleteFirst();
        }
        if(m=="insertLast"){
            listi.insertlast();
        }

}}
  listi.show();
 return 0;
        }




